plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}
group 'mediline'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8


apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

repositories {
    mavenCentral()
    maven { url "https://mvnrepository.com/artifact/org.apache.spark/spark-core" }
    maven { url "https://mvnrepository.com/artifact/org.apache.spark/spark-repl" }
    maven { url "https://mvnrepository.com/artifact/org.apache.spark/spark-streaming" }
    maven { url "https://mvnrepository.com/artifact/org.apache.spark/spark-mllib" }
    maven { url "https://mvnrepository.com/artifact/org.apache.spark/spark-graphx" }

}

dependencies {
    compile "org.scala-lang:scala-library:"+scalaVersion
    compile "org.scala-lang:scala-reflect:"+scalaVersion
    compile "org.scala-lang:scala-compiler:"+scalaVersion
    compile group: 'org.apache.spark', name: 'spark-core_2.11', version: '2.2.0'
    compile group: 'org.apache.spark', name: 'spark-sql_2.11', version: '2.2.0'
    compile group: 'org.apache.spark', name: 'spark-graphx_2.11', version: '2.2.0'
    provided group: 'org.apache.spark', name: 'spark-streaming_2.11', version: '2.2.0'
    runtime group: 'org.apache.spark', name: 'spark-mllib_2.11', version: '2.2.0'
    provided group: 'org.apache.spark', name: 'spark-repl_2.11', version: '2.2.0'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile group: 'com.typesafe', name: 'config', version: '1.3.3'
}

task run(type: JavaExec, dependsOn: classes) {
    main = mainClassFile
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

jar {
    classifier = 'all'
    manifest {
        attributes 'Implementation-Title': title,
                'Implementation-Version': version,
                'Main-Class': mainClassFile
    }
    include{sourceSets.main.output.classesDir}
    zip64 true
}

shadowJar {
    classifier = 'shadow'
    append 'reference.conf'
    dependencies {

    }
    zip64 true
}

idea {
    module {
        // IntelliJ does not know about the standard idiom of provided as used in managing
        // uber/shaded jar dependencies. Make it so!
        scopes.PROVIDED.plus += [configurations.provided]
    }

}